Configuration
git config --global user.name "Adiansyah Putra"
git config --global user.email "adiansyahhputra@gmail.com"

Congifurasi Visual studio code
git config --global core.editor "code --wait"
git config --global diff.tool "default-difftool"
git config --global difftool.default-difftool.cmd "code --wait --diff \$LOCAL \$REMOTE"

Melihat Seluruh Configuration
git config --list --show-origin

Repository
Repository merupakan sebutan project di Git
Kita bisa membuat folder kosong atau folder yang sudah berisi file, lalu membuatnya sebagai Git Repository
Atau kita bisa melakukan clone Git Repository yang sudah ada dari Server Git

Membuat Repository
Untuk membuat repository, kita hanya perlu menggunakan perintah :
git init
Dan dilakukan dari dalam folder yang akan kita jadikan sebagai Git Repository
Setelah membuat Git Repository, kita bisa lihat ada folder baru dengan nama .git
.git merupakan folder yang berisikan database Git, jangan sampai kita mengubah data yang terdapat pada folder .git

git status

Menambah File
Untuk menambah file baru ke Repository, kita cukup tambahkan file nya saja
Secara otomatis file yang kita tambahkan awalnya akan berada di working directory
Secara default saat menambah file baru, file tersebut tidak akan di track perubahannya
Agar perubahan di track, kita harus pindahkan dari working directory ke staging index

Kode : Memindahkan ke Staging Index
git add *namafile

Kode : Commit ke Repository
git commit -m "menambahfilebaru"

Mengubah File
git add *namafile

Melihat Perubahan File
git diff

Menghapus File
Untuk menghapus file di Repository, kita cukup lakukan delete file nya di folder nya
Secara otomatis Git akan mendeteksi file yang hilang
Sama seperti menambah dan menghapus, jika ingin simpan secara permanen di Repository, kita harus  menambahkan operasi tersebut  ke Staging Index,  lalu commit ke Repository 

git add . (all)

Membatalkan Penambahan File
Jika kita menambah  file di Working Directory, lalu misal kita ingin membatalkan perubahannya
Caranya cukup sederhana, kita hanya perlu menghapus file tersebut, atau bisa menggunakan perintah :
git clean -f

Membatalkan Perubahan File
Jika kita ingin membatalkan perubahan file yang telah kita lakukan, kita bisa menggunakan perintah :
git restore namafile

Membatalkan Penghapusan File
Penghapusan file sebenarnya sama dengan perubahan file, jadi jika kita ingin membatalkan penghapusan file, kita bisa gunakan perintah yang sama dengan membatalkan perubahan file :
git restore namafile

Membatalkan dari Staging Index
Perintah git restore hanya bisa dilakukan untuk membatalkan perubahan yang terjadi di Working Directory
Artinya jika perubahan terlanjur kita masukkan ke Staging Index, maka untuk membatalkannya tidak bisa kita lakukan secara langsung dari Staging Index
Kita perlu mengembalikan posisi dari Staging Index ke Working Directory terlebih dahulu, caranya kita bisa gunakan perintah :
git restore --staged namafile

Membatalkan Yang Sudah di Commit
Bagaimana jika perubahan yang kita lakukan terlanjur di commit?
Tidak ada cara yang bisa kita lakukan jika perubahan sudah terlanjur di commit
Yang bisa kita lakukan adalah dengan dua cara, Rollback Commit atau Revert Commit
Kedua cara tersebut akan kita bahas di materi sendiri-sendir

Commit Log
Git adalah distributed version control, artinya walaupun kita Repository di local komputer kita, semua riwayat perubahan disimpan di komputer kita
Kekurangannya menjadi makin lama Repository akan semakin besar ukurannya, namun keuntungannya, kita bisa melihat semua riwayat commit, atau disebut Commit Log
Untuk melihat Commit Log, kita bisa gunakan perintah : 
git log

Log Sederhana
Kadang kita hanya ingin melihat commit log message nya saja atau istilahnya adalah versi sederhananya saja
Untuk melakukan itu, kita bisa gunakan perintah :
git log --oneline

Graph
Saat nanti kita sudah belajar tentang Git Branching, kadang kita ingin melihat commit log dengan hubungannya dengan commit log sebelumnya
Hal ini bisa kita lakukan menggunakan perintah :
git log --oneline --graph

Melihat Detail Commit
Kadang kita ingin melihat detail perubahan yang terjadi pada sebuah commit
Untuk melakukan itu, kita bisa gunakan perintah :
git show *hash

Compare Commit
Git memiliki fitur untuk membandingkan antara commit dengan commit lainnya
Namun jangan sampai salah pengertian, membandingkan disini adalah membandingkan snapshot hasil commit, bukan perubahan yang terjadi antara commit
Misal pada commit sebelumnya kita pernah menambah file3.txt, namun jika kita bandingkan antara commit pertama dan terakhir (HEAD), hasilnya hanyalah perbandingan antara file1 dan file2, tidak ada file3
Hal ini dikarenakan membandingkan commit bukanlah membandingkan perubahan yang pernah terjadi, melainkan membandingkan hasil di commit
Untuk membandingkan commit, kita bisa gunakan perintah :
git diff hash1 hash2

Difftool
Sebelumnya kita sudah melakukan pengaturan menggunakan Visual Studio Code untuk melihat diff
Jika kita ingin menggunakan visual studio code untuk melihat perbedaan antar commit, kita bisa gunakan perintah :
git difftool hash1 hash2

Rename File
Hal yang paling menarik di Git adalah, Git bisa mendeteksi rename file
Secara sederhana sebenarnya rename file merupakan operasi gabungan antara hapus file, lalu menambah file baru dengan isi yang sama
Namun Git bisa otomatis mendeteksi jika terjadi perubahan nama file, karena isi file sebagian besar masih sama

Reset Commit
Sebelumnya kita sudah tahu membatalkan perubahan, namun bagaimana jika ternyata perubahan sudah terlanjur kita commit ke Repository?
Untuk hal seperti itu, kita bisa melakukan reset commit
Reset commit merupakan mekanisme dimana kita menggeser HEAD pointer ke posisi commit yang kita mau, artinya commit selanjutnya akan dilakukan pada posisi HEAD baru
Untuk melakukan reset commit, kita bisa gunakan perintah :
git reset <mode> hash
Ada beberapa mode pengaturan melakukan reset commit

Mode Git Reset
--soft, memindahkan HEAD pointer, namun tidak melakukan perubahan apapun di Staging Index dan Working Directory
--mixed (default), memindahkan HEAD pointer, mengubah Staging Index menjadi sama seperti dengan Repository, namun tidak mengubah apapun di Working Directory
--hard, memindahkan HEAD pointer, dan mengubah Staging Index dan Working Directory sehingga sama dengan Repository

Rewrite Riwayat Commit
Jika kita melakukan reset, namun kita belum membuat commit baru
Kita masih bisa kembali maju lagi ke commit yang paling baru
Namun jika kita membuat commit baru, secara otomatis commit lama akan ditimpa oleh commit baru

Amend Commit
Kadang saat sudah melakukan commit, mungkin ada beberapa hal yang terlupakan
Biasanya kita akan lakukan reset soft ke commit sebelumnya, lalu tambahkan perubahan yang terlupakan, lalu kita lakukan commit ulang
Hal tersebut bisa dilakukan tanpa manual melakukan reset, caranya bisa menggunakan perintah :
git commit --amend -m "isipesan"
Perlu diingat, amend akan mengubah hash commit karena data perubahan yang dicommit bertambah

Versi Sebelumnya
Kadang kita sering mengalami masalah dengan file yang sudah kita commit ke Repository
Git memiliki fitur dimana kita bisa melihat versi file pada commit sebelumnya
Saat kita ambil versi file sebelumnya, file pada commit tersebut akan berada di Staging Index
Untuk melakukannya, kita bisa gunakan perintah :
git checkout hash -- namafile

Kode : Git Status
Misal kita ingin melihat file1.txt sebelum terjadi perubahan di commit 1b5f564, maka kita bisa gunakan perintah : git checkout 2118ac3 -- file1.txt

Snapshot Sebelumnya
Git juga memiliki fitur seperti mesin waktu, dimana kita bisa kembali pada snapshot sebelumnya
Kita bisa tentukan kemana tujuan snapshot kita hanya dengan menggunakan hash commit
Cara jika kita ingin menuju ke snapshot tertentu, cukup gunakan perintah :
git checkout hash
Jika ingin kembali ke paling awal, kita bisa gunakan perintah :
git checkout namabranch

Git Branch
Materi branching akan dibahas pada course terpisah, namun secara default saat kita membuat Git Repository, maka secara otomatis Git akan membuat branch
Untuk melihat nama branch saat ini, kita bisa gunakan perintah :
git branch --show-current

Revert Commit
Git memiliki fitur revert commit, yaitu fitur untuk membatalkan commit yang sudah kita lakukan dengan cara membuat commit baru yang membatalkan commit sebelumnya
Misal kita sudah melakukan commit data perubahan dari text Eko menjadi Eka, jika kita revert, secara otomatis akan membuat commit baru dengan melakukan perubahan dari Eko ke Eko
Untuk melakukan revert commit, kita bisa gunakan perintah :
git revert hash

Ignore
Kadang saat membuat aplikasi, tidak semua file ingin kita track di Git, contoh seperti file log, hasil kompilasi, kadang itu tidak butuh di track di Git
Git memiliki fitur ignore, dimana kita bisa meminta Git secara otomatis tidak men-track file di Git
Caranya kita bisa tambahkan file .gitignore di Repository
Lalu kita bisa tambahkan tiap baris di file .gitignore berisikan file atau folder yang tidak kita ingin track
Isi .gitignore
# Ignore folder log
log/

# Ignore file extension .backup
*.backup

# Ignore ignore.txt
ignore.txt

Blame
Saat membuat kode program kadang kita ingin tahu, siapa yang menambahkan baris kode program tersebut, dan apa saja yang ditambahkan
Git memiliki fitur yang bernama blame, ini digunakan untuk mencari tahu, siapa yang menambah perubahan pada file dan juga untuk mengetahui commit nya
Caranya kita bisa gunakan perintah :
git blame namafile

Alias
Git memiliki fitur yang bernama alias
Dengan alias, kita bisa menambah nama perintah lain untuk perintah yang sudah ada di git
Misal kita bisa menambah perintah co, komit untuk nama lain dari commit misalnya
Atau misal menambah alias logline untuk nama lain dari log --oneline

Melihat Branch Saat Ini
Secara default, Git pasti akan membuat branch utama, biasanya master atau main
Untuk melihat nama branch saat ini, kita bisa gunakan perintah :
git branch --show-current

Membuat Branch
Untuk membuat branch baru, caranya sangat mudah, kita bisa gunakan perintah :
git branch namabranchbaru
Saat kita buat branch baru, secara otomatis branch baru akan dimulai dari posisi branch kita saat ini, jika misal kita membuat branch baru ketika posisi kita sedang di branch master, maka branch baru tersebut akan dibuat dari branch master

Melihat Semua Branch
Untuk melihat semua branch yang ada di Repository kita, kita bisa gunakan perintah :
git branch --list
Atau lebih singkat :
git branch

Pindah ke Branch Lain
Setelah kita membuat branch baru, kita tidak secara otomatis akan pindah branch
Untuk pindah ke branch lain, kita perlu lakukan secara manual
Caranya kita bisa gunakan perintah :
git switch namabranch
git checkout namabranch

Mengubah Nama Branch
Jika kita melakukan kesalahan pembuatan nama branch, kita juga bisa lakukan perubahan nama branch
Namun untuk melakukannya, kita perlu pindah terlebih dahulu ke branch yang ingin kita ubah namanya
Setelah pindah, kita bisa gunakan perintah :
git branch -m namabranchbaru

Menghapus Branch
Jika sebuah branch sudah tidak digunakan lagi, idealnya kita perlu menghapus branch tersebut
Untuk menghapus branch, kita perlu keluar terlebih dahulu dari branch tersebut
Lalu gunakan perintah :
git branch -d namabranch
git branch --delete namabranch

Multiple Branch
Pada kenyataannya, saat membuat aplikasi, branch biasanya akan dibuat banyak sekali
Git mendukung multiple branch, artinya sebanyak apapun branch yang kita buat, Git bisa menanganinya dengan baik

Merge
Merge adalah proses dimana kita melakukan penggabungan dua buah branch
Merge biasanya dilakukan setelah kita selesai membuat kode program di sebuah branch, dan ingin menggabungkan fitur tersebut ke branch lain, misal ke branch utama
Saat kita melakukan merge, branch tidak akan dihapus, artinya kita masih tetap bisa melakukan commit di branch yang ada
Jika kita ingin menghapus branch yang sudah di merge, kita perlu lakukan secara manual

Melakukan Merge
Untuk melakukan merge, pertama kita perlu pindah ke branch dimana kita lokasi merge akan dilakukan
Selanjutnya gunakan perintah :
git merge namabranch
Artinya branch dari namabranch akan di merge ke dalam branch saat ini kita berada

Graph Log
Lihat log git dalam bentuk graph menggunakan perintah :
git log --oneline --graph

Merge Conflict
Dalam pembuatan aplikasi, biasanya setiap programmer akan melakukan penambahkan kode program di Repository secara parallel
Biasanya tiap programmer akan membuat branch masing-masing
Dan tidak bisa dihindari, kadang programmer akan melakukan perubahan pada kode file yang sama di branch berbeda
Dan biasanya ketika melakukan merge, akan terjadi yang namanya conflict
Hal ini disebabkan, satu file diubah di branch yang berbeda, sehingga ketika di merge, kita perlu melakukan yang namanya Merge Conflict

Membatalkan Conflict
Jika terjadi conflict, maka kita wajib memperbaikinya terlebih dahulu
Semua perubahan yang tidak konflik akan secara otomatis berada di Staging Index
Sedangkan perubahan yang konflik akan secara otomatis berada di Working Directory
Jika kita ingin membatalkan merge, kita bisa gunakan perintah :
git merge --abort
Secara otomatis semua perubahan di branch yang ingin kita merge akan dihapus

Memperbaiki Conflict
Saat terjadi conflict, tidak ada cara otomatis memperbaikinya
Kita perlu memperbaiki conflict secara manual
Dan jika perbaikan conflict sudah dilakukan, maka kita perlu melakukan commit perubahan tersebut 

Cherry Pick
Kadang ada kasus, ketika kita membuat kode program di sebuah branch kita ingin melakukan merge, namun tidak ingin melakukan merge semua branch nya, mungkin hanya sebagian commit saja
Cherry Pick merupakan fitur yang digunakan untuk mengambil commit dari branch manapun dan kita merge ke dalam branch saat ini

Melakukan Cherry Pick
Misal sekarang kita ingin melakukan merge branch feature/c, namun kita tidak ingin merge semua perubahan
Misal saja kita hanya ingin melakukan merge perubahan di file1.txt dan file3.txt
Maka kita bisa melakukan cherry pick untuk commit perubahan tersebut, caranya gunakan perintah :
git cherry-pick commitId

Tag
Tag merupakan fitur, dimana kita bisa menandai sebuah commit id
Sebelumnya kita sudah tahu dengan HEAD, yaitu reference ke commit terakhir di branch kita saat ini
Jika kita ingin membuat sebuah reference ke sebuah commit, kita bisa menggunakan Tag
Dalam pengembangan perangkat lunak, biasanya Tag digunakan sebagai penanda versi rilis dari aplikasi, misal Tag 1.0.0, Tag 1.0.2, dan lain-lain
Karena Tag merupakan reference ke commit, jadi Tag bisa dilakukan di branch manapun

Membuat Tag
Tag adalah sesuatu yang unik, artinya jika kita sudah membuat tag dengan nama A, maka kita tidak bisa membuat tag dengan nama yang sama lagi
Untuk membuat tag, kita bisa gunakan perintah :
git tag tagName commitId

Menampilkan Tag
Untuk menampilkan semua tag yang ada di Repository, kita bisa menggunakan perintah :
git tag -l
git tag --list

Checkout ke Tag
Seperti yang sudah dijelaskan di kelas Git Dasar, kita kita melihat snapshot sebelumnya di Git
Sekarang dengan menggunakan Tag, kita juga bisa melihat snapshot sebelumnya tanpa harus menggunakan commitId, cukup menggunakan Tag :
git checkout tagname

Menghapus Tag
Tidak ada cara untuk mengubah Tag, jadi jika kita ingin mengubah Tag, kita bisa membuat Tag baru ke commit yang sama, lalu menghapus Tag yang lama
Untuk menghapus Tag, kita bisa gunakan perintah :
git tag -d namatag
git tag --delete namatag

Stash
Kadang ada keadaan, dimana kita sedang melakukan perubahan di sebuah branch, namun perubahan nya belum disimpan di Repository, misal masih di Working atau Staging Index
Lalu kita butuh secepatnya melakukan perubahan di branch lain
Jika perubahan tersebut belum siap kita commit, kita bisa menyimpan semua perubahan tersebut ke Stash
Stash adalah sebuah tempat dimana kita bisa menyimpan perubahan di Working atau Staging Index secara sementara agar branch saat ini menjadi bersih kembali, sehingga kita bisa pindah ke branch lain

Error Ketika Pindah Branch
Secara default, ketika kita melakukan perpindahan branch, Git akan secara pintar membawa perubahan yang terjadi di branch saat ini ke branch tujuan pindah
Namun jika ternyata terdapat conflict, pada kasus kita, pada file1.txt terdapat conflict, maka secara otomatis kita tidak bisa pindah ke branch tersebut

Menyimpan Perubahan ke Stash
Untuk menyimpan semua perubahan yang terjadi di Working dan Staging Index, kita bisa menggunakan Stash
Untuk menyimpan perubahan ke Stash, kita bisa gunakan perintah :
git stash push -m ‘message stash’
Untuk melihat semua Stash, kita bisa gunakan perintah :
git stash list
Untuk melihat perubahan yang terjadi di Stash, kita bisa gunakan perintah 
git stash show stashId (stash id = angkanya)

Mengambil Perubahan di Stash
Untuk mengambil perubah di stash, kita bisa gunakan perintah :
git stash apply stashId
Untuk menghapus stash, kita bisa gunakan perintah :
git stash drop stashId
Untuk menghapus semua stash, kita bisa gunakan perintah :
git stash clear

Rebase
Sebelumnya untuk menggabungkan dua buah branch, kita sudah belajar yang namanya merge
Sekarang kita akan bahas tentang cara lain menggabungkan dua buah branch, yaitu rebase
Rebase agak sedikit kompleks, jadi kita akan coba bahas secara visual

Melakukan Rebase
Untuk melakukan rebase, kita bisa lakukan perintah :
git rebase namabranch
Jika sekarang kita ada di branch feature/rebase, lalu menggunakan perintah :
git rebase master
Artinya kita melakukan rebase semua commit di master ke branch develop

Merge Branch
Setelah melakukan rebase, bukan berarti branch yang di rebase sekarang posisinya ada di branch yang melakukan rebase, posisinya tetap ada di commit terakhir di branch tersebut
Seperti yang terlihat pada gambar Diagram Rebase Branch
Agar posisinya sama dengan branch yang melakukan rebase, kita bisa menggunakan perintah merge

Merge vs Rebase
Rebase akan terlihat sangat rapih, karena timeline nya seakan terlihat hanya ada satu timeline pada Repository
Namun, rebase sebenarnya secara otomatis menulis ulang semua commit yang kita lakukan, dalam artian commit id pasti berubah, artinya semua referensi ke commit id sebelum-sebelumnya akan rusak dan hilang
Tidak ada mana yang lebih baik, semua tergantung kebutuhan

Squash
Saat kita melakukan merge atau rebase, semua commit history akan tetap ada
Jadi kita kita di branch tersebut melakukan commit sebanyak 10 kali, ketika kita lakukan merge atau rebase, maka 10 commit tersebut akan tetap ada
Kadang ada kasus dimana kita ingin melakukan penggabungan commit tersebut menjadi 1 commit saja, hal ini dinamakan Squash
Squash akan membuat 10 commit history tersebut menjadi 1 commit, dimana semua 10 perubahan tersebut akan digabungkan menjadi 1 commit saja

Melakukan Squash
Squash bisa dilakukan ketika merge atau ketika rebase
Untuk melakukan squash ketika merge, kita bisa gunakan perintah :
git merge --squash namabranch
perubahan akan masuk ke staging index

Git Branching Strategy
Materi untuk Git Branching sebenarnya sudah selesai
Kita sudah mulai bisa menggunakan fitur branching untuk mulai membuat aplikasi kita
Namun sebelum selesai, kita akan bahas beberapa strategy Git Branching yang populer, yang bisa kita tiru ketika membuat aplikasi

Git Branching Strategy Populer
Gitflow Workflow
Trunk Based Development Workflow
Forking Workflow

Gitflow
Gitflow adalah strategi git branching yang paling tua dan paling banyak diadopsi

Trunk Based Development
Trunk Based Development sekarang merupakan salah satu strategi git branching yang sedang populer
Tujuan dari workflow ini adalah, sederhana dan deliver pekerjaan secepatnya
https://trunkbaseddevelopment.com/ 

Forking Workflow
Forking workflow merupakan salah satu strategi git branching yang populer dalam project OpenSource
Forking adalah mekanisme menduplikasi repository, biasanya hal ini dilakukan karena contributor tidak memiliki akses untuk melakukan perubahan ke repository utama
https://www.atlassian.com/git/tutorials/comparing-workflows/forking-workflow 

Git Server Repository
Tiap Git Server biasanya memiliki fitur untuk membuat Git Repository
Tidak wajib kita harus membuat Git Repository di local dulu jika ingin membuat Git Repository di Git Server
Sekarang silahkan buat Git Repository di Github dengan nama belajar-git-remote
https://github.com/new 

SSH
SSH adalah singkatan dari Secure Shell
SSH merupakan protokol jaringan untuk komunikasi jaringan yang aman dan terenkripsi
Pengguna sistem operasi Linux atau Mac biasanya sudah sangat familiar dengan SSH
SSH merupakan aplikasi berbasis terminal
Di Linux dan Mac, SSH sudah terinstall secara otomatis, sedangkan di Windows, ketika kita menginstall Git, secara otomatis Git akan menginstall SSH juga

Git SSH
Git sendiri memiliki beberapa mekanisme untuk berkomunikasi dengan Git Server, seperti http dan SSH
Pada kelas ini, kita akan menggunakan SSH untuk berkomunikasi dengan Git Server
Hal ini karena SSH merupakan protokol yang direkomendasikan ketika berkomunikasi dengan Git Server

SSH Key
Hal pertama yang perlu kita lakukan ketika menggunakan SSH adalah, membuat SSH Key
SSH Key merupakan kunci yang digunakan untuk autentikasi ke SSH Server
Untuk membuat SSH Key, kita bisa gunakan perintah ssh-keygen di terminal
Setelah selesai, maka secara otomatis akan terdapat 2 key di local kita, yaitu private key dan public key
Kita bisa melihatnya di dalam folder .ssh di Home directory kita
File id_rsa adalah private key, dan id_rsa.pub adalah public key

Menambahkan SSH Public Key ke Github
Setelah kita membuat SSH Key, selanjutnya kita perlu meregistrasikan SSH public key ke Github
Hal ini dilakukan, agar ketika kita nanti terkoneksi ke Git Server di Github, kita tidak perlu melakukan autentikasi lagi
https://github.com/settings/keys 

Test SSH ke Github
Selanjutnya untuk memastikan apakah kita sudah bisa terkoneksi ke Github menggunakan SSH, kita bisa gunakan perintah :
ssh -T git@github.com

Remote Repository
Ketika kita membuat Git Project, secara default, Git tidak tahu tentang Remote Repository
Kita perlu memberi tahu ke git project yang sudah kita buat tentang lokasi git repository

Menambah Remote Repository
Untuk menambah remote repository, kita bisa gunakan perintah :
git remote add nama ssh-url
Salah satu kebiasaan di Git, biasanya memberi nama untuk remote repository dengan nama origin

Melihat Remote Repository
Untuk melihat remote repository yang ada di git project, kita bisa gunakan perintah :
git remote
Untuk melihat URL detail remote repository, kita bisa gunakan perintah 
git remote get-url nama

Menghapus Remote Repository
Untuk menghapus remote repository, kita bisa gunakan perintah :
git remote rm nama

Push
Walaupun kita sudah menyimpan perubahan di Git Project di local, tapi tidak secara otomatis akan di sync dengan Remote Repository
Hal ini karena sejak awal Git di desain sebagai distributed version control, artinya kita bisa melakukan perubahan dimanapun dan kapanpun, tanpa harus terkoneksi ke Git Server
Oleh karena itu, jika kita ingin mengirim perubahan yang terjadi di Git Project di local kita, kita perlu mengirimnya secara manual ke Git Server
Untuk mengirim perubahan di local ke git server, kita bisa gunakan perintah yang bernama push

Push Branch
Untuk mengirim perubahan branch ke remote repository dengan nama branch sama:
git push namaremote localbranch
Untuk mengirim perubahan branch ke remote repository dengan nama branch yang berbeda, kita bisa gunakan perintah :
git push namaremote localbranch:remotebranch

git push origin master  

git push origin master:develop 

Push Semua Branch
Jika kita ingin mengirim semua perubahan di semua branch ke remote repository, kita bisa gunakan perintah :
git push origin --all

Menghapus Branch
Perintah Push juga bisa digunakan untuk menghapus branch yang ada di remote repository
Kita bisa gunakan perintah 
git push --delete namaremote namabranch
Perlu diingat, menghapus remote branch bukan berarti menghapus branch di local, jadi jika kita ingin hapus di local, kita harus lakukan secara manual

Clone
Apa yang harus dilakukan jika misal kita ingin download project Git yang ada di Server ke komputer baru?
Hal ini dinamakan perintah clone
Dengan perintah clone, kita bisa download project di remote repository ke local dan secara otomatis di download sebagai git project

Melakukan Clone
Untuk melakukan clone, kita bisa gunakan perintah :
git clone urlremoterepository
Secara default, clone akan membuat project dengan nama folder sama dengan nama project remote repository
Jika kita ingin melakukan clone, dengan nama folder yang berbeda dengan nama project remote repository, kita bisa gunakan perintah :
git clone urlremoterepository namafolder

Default Hasil Clone
Default clone akan berisi remote repository origin ke git remote repository yang kita clone
Default clone akan berisikan branch utama di remote repository

Tugas
Simulasikan terdapat dua pengguna
Clone project Git di remote di folder yang berbeda

git clone git@github.com:adiansyahputra/belajar-git-remote.git belajar-git-remote-user2 

Remote Branch

Melihat Remote Branch
Secara default, saat kita melakukan clone, tidak semua remote branch akan di buat di local git project
Jika kita ingin melihat semua daftar branch yang ada di remote repository, kita bisa gunakan perintah :
git branch -r
Atau jika kita ingin melihat semua branch di local dan remote, kita bisa gunakan perintah :
git branch -a

Membuat Branch dari Remote Branch
Karena secara default hanya branch utama yang buat di local git project ketika kita clone, kadang kita ingin membuat local branch yang berisikan data dari remote branch
Untuk melakukan hal itu, kita bisa gunakan perintah :
git checkout -b localbranch namaremote/remotebranch

git checkout -b feature/a origin/feature/a 

Fetch
Fetch adalah perintah di Git yang digunakan untuk mendapatkan perubahan terakhir dari remote repository
Hal ini berguna ketika misal kita ingin mengetahui perubahan apa aja yang sudah terjadi pada remote repository, mungkin rekan kerja kita sudah menambah perubahan ke remote repository
Fetch itu tidak akan mengubah isi local Git Project kita

Melakukan Fetch
Untuk melakukan fetch untuk semua branch di remote repository, kita bisa gunakan perintah :
git fetch namaremote
Atau jika kita ingin melakukan fetch untuk branch tertentu saja di remote, kita bisa gunakan :
git fetch namaremote remotebranch

Tugas
Lakukan commit dan push di user pertama
Lakukan fetch di user kedua
Di user kedua Lakukan git diff dari branch local dan branch remote

git fetch origin feature/a

git diff feature/a..origin/feature/a 

Pull
Jika fetch hanya melakukan untuk mendapatkan perubahan di remote repository tanpa mengubah local repository
Dengan menggunakan pull, kita akan mengambil perubahan yang ada di remote repository dan disimpan di local repository
Hati-hati jangan sampai terjadi merge conflict, jika terjadi merge conflict, kita harus perbaiki secara manual seperti yang sudah kita pelajari di materi merge
Saat kita melakukan pull, secara otomatis kita akan melakukan fetch terlebih dahulu

Melakukan Pull
Untuk melakukan pull ke local branch saat ini, kita bisa gunakan perintah 
git pull namaremote namaremotebranch

Tugas
Lakukan commit dan push di user pertama
Lakukan pull di user kedua
Bandingkan local branch dan remote branch di user kedua

git pull origin feature/a
git diff feature/a..origin/feature/a 

Tag
Saat kita melakukan push data ke remote repository, data Tag tidak akan di push juga ke remote repository
Jika kita ingin mengirim data Tag juga, kita perlu melakukan push tag tersebut

Mengirim Tag 
Untuk mengirim Tag ke remote repository, kita bisa gunakan perintah 
git push namaremote namatag
Atau jika kita ingin mengirim semua Tag ke remote repository, kita bisa gunakan perintah 
git push namaremote --tags

git push origin --tags 

Mengambil Tag
Untuk mengambil Tag, kita bisa gunakan perintah 
git fetch namaremote namatag
Atau jika kita ingin mengambil semua Tag, kita bisa gunakan perintah 
git fetch namaremote

git fetch origin 

Menghapus Tag
Saat kita menghapus Tag di local repository, data tag tersebut tetap ada di remote repository
Jika kita ingin menghapus Tag di remote repository, kita bisa gunakan perintah :
git push --delete namaremote namatag

git push --delete origin 1.0.0-SNAPSHOT 

Pull Request
Saat kita bekerja dengan tim, biasanya saat melakukan perubahan kita akan membuat di branch yang berbeda dengan branch utama
Setelah selesai, kita bisa melakukan yang namanya merge ke branch utama
Namun, beberapa fitur di remote git repository mendukung fitur yang namanya Pull Request atau Merge Request
Fitur ini sangat cocok untuk melakukan review otomatis di remote git repository, tanpa harus manual melakukan review dengan git diff

User 1

 adiansyahputra   ~/eko/belajar-git-remote 
      master  1.0.0  git branch feature/contoh                                     4766

 adiansyahputra   ~/eko/belajar-git-remote 
      master  1.0.0  git checkout feature/contoh                                   4767
Switched to branch 'feature/contoh'

 adiansyahputra   ~/eko/belajar-git-remote 
      feature/contoh  1.0.0  git status                                            4768
On branch feature/contoh
Untracked files:
  (use "git add <file>..." to include in what will be committed)
        contoh.html

nothing added to commit but untracked files present (use "git add" to track)

 adiansyahputra   ~/eko/belajar-git-remote 
      feature/contoh  1.0.0   git add contoh.html                                 4769

 adiansyahputra   ~/eko/belajar-git-remote 
      feature/contoh  1.0.0   git commit -m "add contoh.html"                     4770
[feature/contoh 58c01e1] add contoh.html
 1 file changed, 5 insertions(+)
 create mode 100644 contoh.html

 adiansyahputra   ~/eko/belajar-git-remote 
      feature/contoh  git push origin feature/contoh                                4771
Enumerating objects: 4, done.
Counting objects: 100% (4/4), done.
Delta compression using up to 8 threads
Compressing objects: 100% (3/3), done.
Writing objects: 100% (3/3), 386 bytes | 193.00 KiB/s, done.
Total 3 (delta 0), reused 0 (delta 0), pack-reused 0
remote: 
remote: Create a pull request for 'feature/contoh' on GitHub by visiting:
remote:      https://github.com/adiansyahputra/belajar-git-remote/pull/new/feature/contoh
remote: 
To github.com:adiansyahputra/belajar-git-remote.git
 * [new branch]      feature/contoh -> feature/contoh

 adiansyahputra   ~/eko/belajar-git-remote 
      feature/contoh  git status                                           3.25   4772
On branch feature/contoh
Changes not staged for commit:
  (use "git add <file>..." to update what will be committed)
  (use "git restore <file>..." to discard changes in working directory)
        modified:   index.html

no changes added to commit (use "git add" and/or "git commit -a")

 adiansyahputra   ~/eko/belajar-git-remote 
      feature/contoh   git add index.html                                          4773

 adiansyahputra   ~/eko/belajar-git-remote 
      feature/contoh   git commit -m "add contoh to index.html"                    4774
[feature/contoh 797064d] add contoh to index.html
 1 file changed, 1 insertion(+)

 adiansyahputra   ~/eko/belajar-git-remote 
      feature/contoh  git push origin feature/contoh                                4775
Enumerating objects: 5, done.
Counting objects: 100% (5/5), done.
Delta compression using up to 8 threads
Compressing objects: 100% (3/3), done.
Writing objects: 100% (3/3), 322 bytes | 322.00 KiB/s, done.
Total 3 (delta 1), reused 0 (delta 0), pack-reused 0
remote: Resolving deltas: 100% (1/1), completed with 1 local object.
To github.com:adiansyahputra/belajar-git-remote.git
   58c01e1..797064d  feature/contoh -> feature/contoh

 adiansyahputra   ~/eko/belajar-git-remote 
      feature/contoh  git checkout master                                  3.27   4776
Switched to branch 'master'

 adiansyahputra   ~/eko/belajar-git-remote 
      master  1.0.0  git pull origin master                                        4777
remote: Enumerating objects: 1, done.
remote: Counting objects: 100% (1/1), done.
remote: Total 1 (delta 0), reused 0 (delta 0), pack-reused 0
Unpacking objects: 100% (1/1), 628 bytes | 628.00 KiB/s, done.
From github.com:adiansyahputra/belajar-git-remote
 * branch            master     -> FETCH_HEAD
   54f77d0..e420517  master     -> origin/master
Updating 54f77d0..e420517
Fast-forward
 contoh.html | 5 +++++
 index.html  | 1 +
 2 files changed, 6 insertions(+)
 create mode 100644 contoh.html

 User 2

  adiansyahputra   ~/eko/belajar-git-remote-user2 
      master  5  git pull origin master                                                         4779
From github.com:adiansyahputra/belajar-git-remote
 * branch            master     -> FETCH_HEAD
Updating b297db4..e420517
Fast-forward
 contoh.html | 5 +++++
 index.html  | 1 +
 version.txt | 1 +
 3 files changed, 7 insertions(+)
 create mode 100644 contoh.html
 create mode 100644 version.txt

 adiansyahputra   ~/eko/belajar-git-remote-user2 
      master  clear                                                                     3.39   4780


 adiansyahputra   ~/eko/belajar-git-remote-user2 
      master  ls -l                                                                              4781
total 32
-rw-r--r--  1 adiansyahputra  staff  54 Feb 25 09:08 contoh.html
-rw-r--r--  1 adiansyahputra  staff  69 Feb 25 09:07 hello.html
-rw-r--r--  1 adiansyahputra  staff  77 Feb 25 09:08 index.html
-rw-r--r--  1 adiansyahputra  staff   5 Feb 25 09:08 version.txt

 adiansyahputra   ~/eko/belajar-git-remote-user2 
      master  cat index.html                                                                     4782
<html>
  <body>
    <h1>Hello Git</h1>
    <h1>Contoh</h1>
  </body>
</html>

Merge Conflict
Ketika melakukan Pull Request, kadang sering terjadi Merge Conflict yang menyebabkan tidak bisa lakukan proses merge otomatis
Pada kasus seperti itu, kita perlu melakukan merge dari branch asal nya terlebih dahulu, lalu memperbaiki conflict nya

User 2

 adiansyahputra   ~/eko/belajar-git-remote-user2 
      master   git status                                               4785
On branch master
Your branch is up to date with 'origin/master'.

Changes not staged for commit:
  (use "git add <file>..." to update what will be committed)
  (use "git restore <file>..." to discard changes in working directory)
        modified:   index.html

no changes added to commit (use "git add" and/or "git commit -a")

 adiansyahputra   ~/eko/belajar-git-remote-user2 
      master   git add index.html                                       4786

 adiansyahputra   ~/eko/belajar-git-remote-user2 
      master   git commit -m "add user 2 to index.html"                 4787
[master 5bd2dcd] add user 2 to index.html
 1 file changed, 2 insertions(+), 1 deletion(-)

 adiansyahputra   ~/eko/belajar-git-remote-user2 
      master  1  git push origin master                                 4788
Enumerating objects: 5, done.
Counting objects: 100% (5/5), done.
Delta compression using up to 8 threads
Compressing objects: 100% (3/3), done.
Writing objects: 100% (3/3), 335 bytes | 335.00 KiB/s, done.
Total 3 (delta 1), reused 0 (delta 0), pack-reused 0
remote: Resolving deltas: 100% (1/1), completed with 1 local object.
To github.com:adiansyahputra/belajar-git-remote.git
   e420517..5bd2dcd  master -> master

User 1

 adiansyahputra   ~/eko/belajar-git-remote 
      master  cat index.html                                               3.57   4778
<html>
  <body>
    <h1>Hello Git</h1>
    <h1>Contoh</h1>
  </body>
</html>

 adiansyahputra   ~/eko/belajar-git-remote 
      master  git branch feature/user1                                              4790

 adiansyahputra   ~/eko/belajar-git-remote 
      master  git checkout feature/user1                                            4791
Switched to branch 'feature/user1'

 adiansyahputra   ~/eko/belajar-git-remote 
      feature/user1  git status                                                     4792
On branch feature/user1
Changes not staged for commit:
  (use "git add <file>..." to update what will be committed)
  (use "git restore <file>..." to discard changes in working directory)
        modified:   index.html

no changes added to commit (use "git add" and/or "git commit -a")

 adiansyahputra   ~/eko/belajar-git-remote 
      feature/user1   git add index.html                                           4793

 adiansyahputra   ~/eko/belajar-git-remote 
      feature/user1   git commit -m "add user1 to index.html"                      4794
[feature/user1 31504bc] add user1 to index.html
 1 file changed, 2 insertions(+), 1 deletion(-)

 adiansyahputra   ~/eko/belajar-git-remote 
      feature/user1  git push origin feature/user1                                  4795
Enumerating objects: 8, done.
Counting objects: 100% (8/8), done.
Delta compression using up to 8 threads
Compressing objects: 100% (4/4), done.
Writing objects: 100% (4/4), 946 bytes | 946.00 KiB/s, done.
Total 4 (delta 1), reused 0 (delta 0), pack-reused 0
remote: Resolving deltas: 100% (1/1), completed with 1 local object.
remote: 
remote: Create a pull request for 'feature/user1' on GitHub by visiting:
remote:      https://github.com/adiansyahputra/belajar-git-remote/pull/new/feature/user1
remote: 
To github.com:adiansyahputra/belajar-git-remote.git
 * [new branch]      feature/user1 -> feature/user1

 adiansyahputra   ~/eko/belajar-git-remote 
      feature/user1  git fetch origin                                      3.30   4796
remote: Enumerating objects: 5, done.
remote: Counting objects: 100% (5/5), done.
remote: Compressing objects: 100% (2/2), done.
remote: Total 3 (delta 1), reused 3 (delta 1), pack-reused 0
Unpacking objects: 100% (3/3), 315 bytes | 63.00 KiB/s, done.
From github.com:adiansyahputra/belajar-git-remote
   e420517..5bd2dcd  master     -> origin/master

 adiansyahputra   ~/eko/belajar-git-remote 
      feature/user1  git pull origin master                                3.75   4797
From github.com:adiansyahputra/belajar-git-remote
 * branch            master     -> FETCH_HEAD
hint: You have divergent branches and need to specify how to reconcile them.
hint: You can do so by running one of the following commands sometime before
hint: your next pull:
hint: 
hint:   git config pull.rebase false  # merge
hint:   git config pull.rebase true   # rebase
hint:   git config pull.ff only       # fast-forward only
hint: 
hint: You can replace "git config" with "git config --global" to set a default
hint: preference for all repositories. You can also pass --rebase, --no-rebase,
hint: or --ff-only on the command line to override the configured default per
hint: invocation.
fatal: Need to specify how to reconcile divergent branches.

 adiansyahputra   ~/eko/belajar-git-remote 
      feature/user1  git merge origin/main                           128 ↵  3.39   4798
merge: origin/main - not something we can merge

 adiansyahputra   ~/eko/belajar-git-remote 
      feature/user1  git merge origin/master                                    1 ↵  4799
Auto-merging index.html
CONFLICT (content): Merge conflict in index.html
Automatic merge failed; fix conflicts and then commit the result.

 adiansyahputra   ~/eko/belajar-git-remote 
      feature/user1 | merge  git status                                         1 ↵  4800
On branch feature/user1
You have unmerged paths.
  (fix conflicts and run "git commit")
  (use "git merge --abort" to abort the merge)

Unmerged paths:
  (use "git add <file>..." to mark resolution)
        both modified:   index.html

no changes added to commit (use "git add" and/or "git commit -a")

 adiansyahputra   ~/eko/belajar-git-remote 
      feature/user1 | merge  GIT STATUS                                             4801
fatal: cannot handle STATUS as a builtin

 adiansyahputra   ~/eko/belajar-git-remote 
      feature/user1 | merge  git status                                       128 ↵  4802
On branch feature/user1
You have unmerged paths.
  (fix conflicts and run "git commit")
  (use "git merge --abort" to abort the merge)

Unmerged paths:
  (use "git add <file>..." to mark resolution)
        both modified:   index.html

no changes added to commit (use "git add" and/or "git commit -a")

 adiansyahputra   ~/eko/belajar-git-remote 
      feature/user1 | merge  git add index.html                                     4803

 adiansyahputra   ~/eko/belajar-git-remote 
      feature/user1 | merge  git commit -m "fix conflict index.html"                4804
[feature/user1 a78b485] fix conflict index.html

 adiansyahputra   ~/eko/belajar-git-remote 
      feature/user1  git push origin feature/user1                                  4805
Enumerating objects: 7, done.
Counting objects: 100% (7/7), done.
Delta compression using up to 8 threads
Compressing objects: 100% (3/3), done.
Writing objects: 100% (3/3), 372 bytes | 372.00 KiB/s, done.
Total 3 (delta 1), reused 0 (delta 0), pack-reused 0
remote: Resolving deltas: 100% (1/1), completed with 1 local object.
To github.com:adiansyahputra/belajar-git-remote.git
   31504bc..a78b485  feature/user1 -> feature/user1

